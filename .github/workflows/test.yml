
# This is a basic workflow to help you get started with Actions

name: test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  run-emulator:
    runs-on: ubuntu-latest
  
  steps: 
   - name: Create Android emulator
     run: |
        brew install intel-haxm
        # Install AVD files
        echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;default;x86_64'
        echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --licenses
        
        avdmanager create avd --name testAVD -d pixel --abi google_apis/x86_64 --package 'system-images;android-31;google_apis;x86_64'
        $ANDROID_HOME/emulator/emulator -list-avds
        if false; then
        emulator_config=~/.android/avd/testAVD.avd/config.ini
        # The following madness is to support empty OR populated config.ini files,
        # the state of which is dependant on the version of the emulator used (which we don't control),
        # so let's be defensive to be safe.
        # Replace existing config (NOTE we're on MacOS so sed works differently!)
        sed -i .bak 's/hw.lcd.density=.*/hw.lcd.density=420/' "$emulator_config"
        sed -i .bak 's/hw.lcd.height=.*/hw.lcd.height=1920/' "$emulator_config"
        sed -i .bak 's/hw.lcd.width=.*/hw.lcd.width=1080/' "$emulator_config"
        # Or, add new config
        if ! grep -q "hw.lcd.density" "$emulator_config"; then
          echo "hw.lcd.density=420" >> "$emulator_config"
        fi
        if ! grep -q "hw.lcd.height" "$emulator_config"; then
          echo "hw.lcd.height=1920" >> "$emulator_config"
        fi
        if ! grep -q "hw.lcd.width" "$emulator_config"; then
          echo "hw.lcd.width=1080" >> "$emulator_config"
        fi
        echo "Emulator settings ($emulator_config)"
        cat "$emulator_config"
        fi
    - name: Build apk file
      run: find /usr -name 'libpulse*'  
        
    - name: Copy jar files to app folder
      run: gradle extractLibs

    - name: Launch Emulator
      run: |       
        echo "Starting emulator and waiting for boot to complete...."
        ls -la $ANDROID_HOME/emulator
        $ANDROID_HOME/tools/emulator -avd testAVD -noaudio -no-window -no-boot-anim -camera-back none -camera-front none -memory 2048 2>&1 &
        $ANDROID_HOME/platform-tools/adb wait-for-device 
        echo "Emulator has finished booting"
        $ANDROID_HOME/platform-tools/adb devices
        sleep 30
        
    - name: Run instrumentation tests
      run: |                
        gradle connectedAndroidTest --stacktrace
        
    - name: Build apk file
      run: gradle assembleRelease

    - name: Upload (unsigned) APK
      uses: actions/upload-artifact@v2.2.4
      with:
          name: kotlin_demo_apk
          path: ${{github.workspace}}/app/build/outputs/apk/release/app-release-unsigned.apk
